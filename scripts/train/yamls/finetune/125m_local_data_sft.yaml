############################################################################################
# NOTE: This uses the MPT _architecture_, but not the HuggingFace pretrained model!        #
# Use this YAML to train directly from a Composer checkpoint.                              #
# This is not the right YAML if you are trying to finetune a HuggingFace pretrained model. #
############################################################################################

max_seq_len: 2048
global_seed: 17

# Run Name
run_name: ft_125m_tok_titulm # If left blank, will be read from env var $RUN_NAME

# Model
# These must match pretraining
model:
  name: mpt_causal_lm
  init_device: meta
  d_model: 768
  n_heads: 12 # Modified 24->16 so that d_head == 128 to statisfy FlashAttention
  n_layers: 12
  expansion_ratio: 4
  max_seq_len: ${max_seq_len}
  vocab_size: 72000
  attn_config:
    attn_impl: triton
    # Set this to `true` if using `train_loader.dataset.packing_ratio` below
    attn_uses_sequence_id: false

# Tokenizer
tokenizer:
  name: hishab/titulm-sentencepiece-72k
  kwargs:
    model_max_length: ${max_seq_len}

# Local data to load into huggingface datasets
dataset: &hf_dataset
  hf_name: json
  hf_kwargs:
    data_dir: ./data
  # preprocessing_fn: my.import.path:my_preprocessing_fn

# Dataloaders
train_loader: &train_loader
  name: finetuning
  dataset:
    <<: *hf_dataset
    split: train
    max_seq_len: ${max_seq_len}
    allow_pad_trimming: false
    decoder_only_format: true
    shuffle: true
    # # Use packing_ratio: 'auto' to automatically profile and select the highest observed packing ratio with
    # # zero waste. In practice, this may result in > 0 waste because profiling is done on only a portion
    # # of the dataset.
    # # Or use `python llmfoundry/scripts/misc/profile_packing.py --yaml-path /path/to/this/yaml/ ...`
    # # to profile this run's optimal packing_ratio as it depends on GPU count,
    # # batch size, sequence length
    # packing_ratio:
  drop_last: true
  num_workers: 8
  pin_memory: false
  prefetch_factor: 2
  persistent_workers: true
  timeout: 0

eval_loader:
  <<: *train_loader
  dataset:
    <<: *hf_dataset
    split: validation
    max_seq_len: ${max_seq_len}
    allow_pad_trimming: false
    decoder_only_format: true
    # packing_ratio:
    shuffle: false
  drop_last: true
  num_workers: 8
  pin_memory: false
  prefetch_factor: 2
  persistent_workers: true
  timeout: 0
  
# Optimization
scheduler:
  name: linear_decay_with_warmup # linear no warmup is HF default which dolly used
  t_warmup: 0ba
  alpha_f: 0

optimizer:
  # mimic HF defaults to replicate dolly
  name: decoupled_adamw
  lr: 6.0e-4
  betas:
  - 0.9
  - 0.999
  eps: 1.0e-8
  weight_decay: 0

algorithms:
  gradient_clipping:
    clipping_type: norm
    clipping_threshold: 1.0

max_duration: 1ep
eval_interval: 100ba
eval_first: false
eval_subset_num_batches: -1
global_train_batch_size: 128

# System
seed: ${global_seed}
device_eval_batch_size: 4
# device_train_microbatch_size: 4
device_train_microbatch_size: auto
precision: amp_bf16

# FSDP
fsdp_config:
  sharding_strategy: FULL_SHARD
  mixed_precision: PURE
  activation_checkpointing: false
  activation_checkpointing_reentrant: false
  activation_cpu_offload: false
  limit_all_gathers: true
  verbose: false

# Logging
progress_bar: false
log_to_console: true
console_log_interval: 1ba

callbacks:
  speed_monitor:
    window_size: 10
  lr_monitor: {}
  memory_monitor: {}
  runtime_estimator: {}

# loggers:
#   wandb: {}

# Checkpoint to local filesystem or remote object store
save_interval: 500ba
# save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
save_folder: ./{run_name}/checkpoints
# save_folder: gs://llm_data_store/common_crawl_data_filtering/data_validation_experiments/experiment_with_data_v2/checkpoints/ba5000_ft

# Load from remote object store
# REPLACE THE BELOW with you own checkpoint!
load_path: gs://llm_data_store/common_crawl_data_filtering/data_validation_experiments/experiment_with_data_v2/checkpoints/ep0-ba5000-rank0.pt
